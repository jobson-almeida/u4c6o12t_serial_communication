.program serial_communication

.wrap_target
    out x, 1
    jmp !x do_zero
do_one:
    set pins, 1 [4]
    jmp cont
do_zero:
    set pins, 1 [2]
    set pins, 0 [2]
cont:
    set pins, 0 [1]
.wrap

; Slightly more fleshed-out 8n1 UART receiver which handles framing errors and
; break conditions more gracefully.
; IN pin 0 and JMP pin are both mapped to the GPIO used as UART RX.

start:
    wait 0 pin 0        ; Stall until start bit is asserted
    set x, 7    [10]    ; Preload bit counter, then delay until halfway through
bitloop:                ; the first data bit (12 cycles incl wait, set).
    in pins, 1          ; Shift data bit into ISR
    jmp x-- bitloop [6] ; Loop 8 times, each loop iteration is 8 cycles
    jmp pin good_stop   ; Check stop bit (should be high)

    irq 4 rel           ; Either a framing error or a break. Set a sticky flag,
    wait 1 pin 0        ; and wait for line to return to idle state.
    jmp start           ; Don't push data if we didn't see good framing.

good_stop:              ; No delay before returning to start; a little slack is
    push                ; important in case the TX clock is slightly too fast.


% c-sdk {
static inline void serial_communication_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    pio_sm_config c = serial_communication_program_get_default_config(offset);

    // Set pin to be part of set output group, i.e. set by set instruction
    sm_config_set_set_pins(&c, pin, 1);

    // Attach pio to the GPIO
    pio_gpio_init(pio, pin);

    // Set pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Set pio clock to 8MHz, giving 10 cycles per LED binary digit
    float div = clock_get_hz(clk_sys) / 8000000.0;
    sm_config_set_clkdiv(&c, div);

    // Give all the FIFO space to TX (not using RX)
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Shift to the left, use autopull, next pull threshold 24 bits
    // sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24);
    sm_config_set_out_shift(&c, false, true, 24); 

    // Set sticky-- continue to drive value from last set/out.  Other stuff off.
    sm_config_set_out_special(&c, true, false, false);

    // Load configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    
    // enable this pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}
